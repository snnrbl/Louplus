/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { createDecorator } from '../../instantiation/common/instantiation';
import { Event } from '../../../base/common/event';
import { isMacintosh, isLinux, isWeb } from '../../../base/common/platform';
import { DisposableStore, Disposable } from '../../../base/common/lifecycle';
import { createCancelablePromise } from '../../../base/common/async';
export var IWindowsService = createDecorator('windowsService');
export var IWindowService = createDecorator('windowService');
export function isWorkspaceToOpen(uriToOpen) {
    return !!uriToOpen['workspaceUri'];
}
export function isFolderToOpen(uriToOpen) {
    return !!uriToOpen['folderUri'];
}
export function isFileToOpen(uriToOpen) {
    return !!uriToOpen['fileUri'];
}
export function getTitleBarStyle(configurationService, environment, isExtensionDevelopment) {
    if (isExtensionDevelopment === void 0) { isExtensionDevelopment = environment.isExtensionDevelopment; }
    if (isWeb) {
        return 'custom';
    }
    var configuration = configurationService.getValue('window');
    var isDev = !environment.isBuilt || isExtensionDevelopment;
    if (isMacintosh && isDev) {
        return 'native'; // not enabled when developing due to https://github.com/electron/electron/issues/3647
    }
    if (configuration) {
        var useNativeTabs = isMacintosh && configuration.nativeTabs === true;
        if (useNativeTabs) {
            return 'native'; // native tabs on sierra do not work with custom title style
        }
        var useSimpleFullScreen = isMacintosh && configuration.nativeFullScreen === false;
        if (useSimpleFullScreen) {
            return 'native'; // simple fullscreen does not work well with custom title style (https://github.com/Microsoft/vscode/issues/63291)
        }
        var style = configuration.titleBarStyle;
        if (style === 'native' || style === 'custom') {
            return style;
        }
    }
    return isLinux ? 'native' : 'custom'; // default to custom on all macOS and Windows
}
var ActiveWindowManager = /** @class */ (function (_super) {
    __extends(ActiveWindowManager, _super);
    function ActiveWindowManager(windowsService) {
        var _this = _super.call(this) || this;
        _this.disposables = _this._register(new DisposableStore());
        var onActiveWindowChange = Event.latch(Event.any(windowsService.onWindowOpen, windowsService.onWindowFocus));
        onActiveWindowChange(_this.setActiveWindow, _this, _this.disposables);
        _this.firstActiveWindowIdPromise = createCancelablePromise(function (_) { return windowsService.getActiveWindowId(); });
        _this.firstActiveWindowIdPromise
            .then(function (id) { return _this.activeWindowId = typeof _this.activeWindowId === 'number' ? _this.activeWindowId : id; })
            .finally(_this.firstActiveWindowIdPromise = undefined);
        return _this;
    }
    ActiveWindowManager.prototype.setActiveWindow = function (windowId) {
        if (this.firstActiveWindowIdPromise) {
            this.firstActiveWindowIdPromise.cancel();
            this.firstActiveWindowIdPromise = undefined;
        }
        this.activeWindowId = windowId;
    };
    ActiveWindowManager.prototype.getActiveClientId = function () {
        return __awaiter(this, void 0, void 0, function () {
            var id, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.firstActiveWindowIdPromise) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.firstActiveWindowIdPromise];
                    case 1:
                        _a = (_b.sent());
                        return [3 /*break*/, 3];
                    case 2:
                        _a = this.activeWindowId;
                        _b.label = 3;
                    case 3:
                        id = _a;
                        return [2 /*return*/, "window:" + id];
                }
            });
        });
    };
    ActiveWindowManager = __decorate([
        __param(0, IWindowsService)
    ], ActiveWindowManager);
    return ActiveWindowManager;
}(Disposable));
export { ActiveWindowManager };
