"use strict";
/********************************************************************************
 * Copyright (C) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var electron_1 = require("electron");
var window_service_1 = require("../../browser/window/window-service");
var ElectronShutdownHook = /** @class */ (function () {
    function ElectronShutdownHook() {
    }
    ElectronShutdownHook_1 = ElectronShutdownHook;
    ElectronShutdownHook.prototype.onStart = function () {
        var _this = this;
        electron_1.ipcRenderer.on(ElectronShutdownHook_1.PreventStop.Channels.REQUEST, function (event) {
            var preventStop = !_this.windowService.canUnload() && 0 !== electron_1.remote.dialog.showMessageBox(electron_1.remote.getCurrentWindow(), {
                type: 'question',
                buttons: ['Yes', 'No'],
                title: 'Confirm',
                message: 'Are you sure you want to quit?',
                detail: 'Changes you made may not be saved.'
            });
            event.sender.send(ElectronShutdownHook_1.PreventStop.Channels.RESPONSE, { preventStop: preventStop });
        });
    };
    var ElectronShutdownHook_1;
    __decorate([
        inversify_1.inject(window_service_1.WindowService),
        __metadata("design:type", Object)
    ], ElectronShutdownHook.prototype, "windowService", void 0);
    ElectronShutdownHook = ElectronShutdownHook_1 = __decorate([
        inversify_1.injectable()
    ], ElectronShutdownHook);
    return ElectronShutdownHook;
}());
exports.ElectronShutdownHook = ElectronShutdownHook;
(function (ElectronShutdownHook) {
    var PreventStop;
    (function (PreventStop) {
        var Channels;
        (function (Channels) {
            Channels.REQUEST = 'prevent-stop-request';
            Channels.RESPONSE = 'prevent-stop-response';
        })(Channels = PreventStop.Channels || (PreventStop.Channels = {}));
    })(PreventStop = ElectronShutdownHook.PreventStop || (ElectronShutdownHook.PreventStop = {}));
})(ElectronShutdownHook = exports.ElectronShutdownHook || (exports.ElectronShutdownHook = {}));
exports.ElectronShutdownHook = ElectronShutdownHook;
//# sourceMappingURL=electron-shutdown-hook.js.map