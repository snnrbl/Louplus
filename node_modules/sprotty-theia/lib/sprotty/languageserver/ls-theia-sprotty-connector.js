"use strict";
/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var diagram_widget_1 = require("../../theia/diagram-widget");
/**
 * Connects sprotty DiagramServers to a Theia LanguageClientContribution.
 *
 * Used to tunnel sprotty actions to and from the sprotty server through
 * the LSP.
 *
 * Instances bridge the gap between the sprotty DI containers (one per
 * diagram) and a specific language client from the Theia DI container
 * (one per application).
 */
var LSTheiaSprottyConnector = /** @class */ (function () {
    function LSTheiaSprottyConnector(services) {
        this.servers = [];
        Object.assign(this, services);
        this.diagramLanguageClient.connect(this);
    }
    LSTheiaSprottyConnector.prototype.connect = function (diagramServer) {
        this.servers.push(diagramServer);
        diagramServer.connect(this);
    };
    LSTheiaSprottyConnector.prototype.disconnect = function (diagramServer) {
        var index = this.servers.indexOf(diagramServer);
        if (index >= 0)
            this.servers.splice(index, 1);
        diagramServer.disconnect();
        this.diagramLanguageClient.didClose(diagramServer.clientId);
    };
    LSTheiaSprottyConnector.prototype.save = function (uri, action) {
        this.fileSaver.save(uri, action);
    };
    LSTheiaSprottyConnector.prototype.showStatus = function (clientId, status) {
        var widget = this.widgetManager
            .getWidgets(this.diagramManager.id)
            .find(function (w) { return w instanceof diagram_widget_1.DiagramWidget && w.clientId === clientId; });
        if (widget instanceof diagram_widget_1.DiagramWidget)
            widget.setStatus(status);
    };
    LSTheiaSprottyConnector.prototype.sendMessage = function (message) {
        this.diagramLanguageClient.sendThroughLsp(message);
    };
    LSTheiaSprottyConnector.prototype.getLanguageClient = function () {
        return this.diagramLanguageClient.languageClient;
    };
    LSTheiaSprottyConnector.prototype.onMessageReceived = function (message) {
        this.servers.forEach(function (element) {
            element.messageReceived(message);
        });
    };
    return LSTheiaSprottyConnector;
}());
exports.LSTheiaSprottyConnector = LSTheiaSprottyConnector;
//# sourceMappingURL=ls-theia-sprotty-connector.js.map