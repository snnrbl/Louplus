"use strict";
/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var browser_1 = require("@theia/core/lib/browser");
var uri_1 = require("@theia/core/lib/common/uri");
var browser_2 = require("@theia/editor/lib/browser");
var browser_3 = require("@theia/languages/lib/browser");
var inversify_1 = require("inversify");
var diagram_widget_1 = require("../diagram-widget");
var acceptMessageType = new browser_3.NotificationType('diagram/accept');
var didCloseMessageType = new browser_3.NotificationType('diagram/didClose');
var openInTextEditorMessageType = new browser_3.NotificationType('diagram/openInTextEditor');
var DiagramLanguageClient = /** @class */ (function () {
    function DiagramLanguageClient(languageClientContribution, editorManager) {
        var _this = this;
        this.languageClientContribution = languageClientContribution;
        this.editorManager = editorManager;
        this.actionMessageReceivers = [];
        this.languageClientContribution.languageClient.then(function (lc) {
            lc.onNotification(acceptMessageType, _this.onMessageReceived.bind(_this));
            lc.onNotification(openInTextEditorMessageType, _this.openInTextEditor.bind(_this));
        }).catch(function (err) { return console.error(err); });
    }
    DiagramLanguageClient.prototype.openInTextEditor = function (message) {
        var uri = new uri_1.default(message.location.uri);
        if (!message.forceOpen) {
            this.editorManager.all.forEach(function (editorWidget) {
                var currentTextEditor = editorWidget.editor;
                if (editorWidget.isVisible && uri.toString(true) === currentTextEditor.uri.toString(true)) {
                    currentTextEditor.cursor = message.location.range.start;
                    currentTextEditor.revealRange(message.location.range);
                    currentTextEditor.selection = message.location.range;
                }
            });
        }
        else {
            var widgetOptions = {
                area: 'main'
            };
            var activeWidget = this.shell.activeWidget;
            if (activeWidget instanceof diagram_widget_1.DiagramWidget) {
                widgetOptions.ref = activeWidget;
                widgetOptions.mode = 'open-to-left';
            }
            this.editorManager.open(uri, { widgetOptions: widgetOptions }).then(function (editorWidget) {
                var editor = editorWidget.editor;
                editor.cursor = message.location.range.start;
                editor.revealRange(message.location.range);
                editor.selection = message.location.range;
            });
        }
    };
    DiagramLanguageClient.prototype.sendThroughLsp = function (message) {
        this.languageClientContribution.languageClient.then(function (lc) {
            return lc.onReady().then(function () {
                return lc.sendNotification(acceptMessageType, message);
            });
        });
    };
    DiagramLanguageClient.prototype.onMessageReceived = function (message) {
        this.actionMessageReceivers.forEach(function (client) {
            client.onMessageReceived(message);
        });
    };
    Object.defineProperty(DiagramLanguageClient.prototype, "languageClient", {
        get: function () {
            return this.languageClientContribution.languageClient;
        },
        enumerable: true,
        configurable: true
    });
    DiagramLanguageClient.prototype.didClose = function (clientId) {
        this.languageClientContribution.languageClient.then(function (lc) { return lc.sendNotification(didCloseMessageType, clientId); });
    };
    DiagramLanguageClient.prototype.connect = function (client) {
        this.actionMessageReceivers.push(client);
    };
    DiagramLanguageClient.prototype.disconnect = function (client) {
        var index = this.actionMessageReceivers.indexOf(client);
        if (index >= 0) {
            this.actionMessageReceivers.splice(index);
        }
    };
    __decorate([
        inversify_1.inject(browser_1.ApplicationShell),
        __metadata("design:type", browser_1.ApplicationShell)
    ], DiagramLanguageClient.prototype, "shell", void 0);
    DiagramLanguageClient = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [Object, browser_2.EditorManager])
    ], DiagramLanguageClient);
    return DiagramLanguageClient;
}());
exports.DiagramLanguageClient = DiagramLanguageClient;
//# sourceMappingURL=diagram-language-client.js.map