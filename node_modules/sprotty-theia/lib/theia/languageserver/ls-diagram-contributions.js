"use strict";
/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var browser_1 = require("@theia/core/lib/browser");
var inversify_1 = require("inversify");
var delete_1 = require("../../sprotty/languageserver/delete");
var diagram_commands_1 = require("../diagram-commands");
var diagram_keybinding_1 = require("../diagram-keybinding");
var diagram_widget_1 = require("../diagram-widget");
var ls_theia_sprotty_connector_1 = require("../../sprotty/languageserver/ls-theia-sprotty-connector");
var LSDiagramCommandContribution = /** @class */ (function () {
    function LSDiagramCommandContribution() {
    }
    LSDiagramCommandContribution.prototype.registerCommands = function (registry) {
        registry.registerCommand({
            id: diagram_commands_1.DiagramCommands.DELETE,
            label: 'Delete selected'
        });
        registry.registerHandler(diagram_commands_1.DiagramCommands.DELETE, new diagram_commands_1.DiagramCommandHandler(this.shell, function (widget) {
            if (widget instanceof diagram_widget_1.DiagramWidget) {
                var workspace = widget.connector instanceof ls_theia_sprotty_connector_1.LSTheiaSprottyConnector ? widget.connector.workspace : undefined;
                if (workspace) {
                    var action = new delete_1.DeleteWithWorkspaceEditAction(workspace, widget.uri.toString(true));
                    widget.actionDispatcher.dispatch(action);
                }
            }
        }));
    };
    __decorate([
        inversify_1.inject(browser_1.ApplicationShell),
        __metadata("design:type", browser_1.ApplicationShell)
    ], LSDiagramCommandContribution.prototype, "shell", void 0);
    LSDiagramCommandContribution = __decorate([
        inversify_1.injectable()
    ], LSDiagramCommandContribution);
    return LSDiagramCommandContribution;
}());
exports.LSDiagramCommandContribution = LSDiagramCommandContribution;
var LSDiagramKeybindingContribution = /** @class */ (function () {
    function LSDiagramKeybindingContribution() {
    }
    LSDiagramKeybindingContribution.prototype.registerKeybindings = function (registry) {
        registry.registerKeybinding({
            command: diagram_commands_1.DiagramCommands.DELETE,
            context: this.diagramKeybindingContext.id,
            keybinding: 'del'
        });
        registry.registerKeybinding({
            command: diagram_commands_1.DiagramCommands.DELETE,
            context: this.diagramKeybindingContext.id,
            keybinding: 'backspace'
        });
    };
    __decorate([
        inversify_1.inject(diagram_keybinding_1.DiagramKeybindingContext),
        __metadata("design:type", diagram_keybinding_1.DiagramKeybindingContext)
    ], LSDiagramKeybindingContribution.prototype, "diagramKeybindingContext", void 0);
    LSDiagramKeybindingContribution = __decorate([
        inversify_1.injectable()
    ], LSDiagramKeybindingContribution);
    return LSDiagramKeybindingContribution;
}());
exports.LSDiagramKeybindingContribution = LSDiagramKeybindingContribution;
//# sourceMappingURL=ls-diagram-contributions.js.map