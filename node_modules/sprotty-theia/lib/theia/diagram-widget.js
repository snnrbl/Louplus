"use strict";
/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var sprotty_1 = require("sprotty");
var widget_1 = require("@theia/core/lib/browser/widgets/widget");
var uri_1 = require("@theia/core/lib/common/uri");
var theia_diagram_server_1 = require("../sprotty/theia-diagram-server");
var DiagramWidgetOptions;
(function (DiagramWidgetOptions) {
    function is(options) {
        return options.diagramType
            && options.uri
            && options.label
            && options.iconClass;
    }
    DiagramWidgetOptions.is = is;
})(DiagramWidgetOptions = exports.DiagramWidgetOptions || (exports.DiagramWidgetOptions = {}));
var DiagramWidget = /** @class */ (function (_super) {
    __extends(DiagramWidget, _super);
    function DiagramWidget(options, widgetId, diContainer, connector) {
        var _this = _super.call(this) || this;
        _this.widgetId = widgetId;
        _this.diContainer = diContainer;
        _this.connector = connector;
        _this.options = options;
        _this.title.closable = true;
        _this.title.label = options.label;
        _this.title.iconClass = options.iconClass;
        return _this;
    }
    Object.defineProperty(DiagramWidget.prototype, "uri", {
        get: function () {
            return new uri_1.default(this.options.uri);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiagramWidget.prototype, "actionDispatcher", {
        get: function () {
            return this.diContainer.get(sprotty_1.TYPES.IActionDispatcher);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiagramWidget.prototype, "viewerOptions", {
        get: function () {
            return this.diContainer.get(sprotty_1.TYPES.ViewerOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiagramWidget.prototype, "modelSource", {
        get: function () {
            return this._modelSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiagramWidget.prototype, "clientId", {
        get: function () {
            if (this._modelSource instanceof sprotty_1.DiagramServer)
                return this._modelSource.clientId;
            else
                return this.widgetId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiagramWidget.prototype, "id", {
        get: function () {
            return this.widgetId;
        },
        enumerable: true,
        configurable: true
    });
    DiagramWidget.prototype.onAfterAttach = function (msg) {
        _super.prototype.onAfterAttach.call(this, msg);
        var svgContainer = document.createElement("div");
        svgContainer.id = this.viewerOptions.baseDiv;
        this.node.appendChild(svgContainer);
        var hiddenContainer = document.createElement("div");
        hiddenContainer.id = this.viewerOptions.hiddenDiv;
        document.body.appendChild(hiddenContainer);
        var statusDiv = document.createElement("div");
        statusDiv.setAttribute('class', 'sprotty-status');
        this.node.appendChild(statusDiv);
        this.statusIconDiv = document.createElement("div");
        statusDiv.appendChild(this.statusIconDiv);
        this.statusMessageDiv = document.createElement("div");
        this.statusMessageDiv.setAttribute('class', 'sprotty-status-message');
        statusDiv.appendChild(this.statusMessageDiv);
        this.initializeSprotty();
    };
    DiagramWidget.prototype.initializeSprotty = function () {
        var _this = this;
        var modelSource = this.diContainer.get(sprotty_1.TYPES.ModelSource);
        this._modelSource = modelSource;
        if (modelSource instanceof theia_diagram_server_1.TheiaDiagramServer && this.connector)
            this.connector.connect(modelSource);
        this.disposed.connect(function () {
            if (modelSource instanceof theia_diagram_server_1.TheiaDiagramServer && _this.connector)
                _this.connector.disconnect(modelSource);
        });
        this.actionDispatcher.dispatch(new sprotty_1.RequestModelAction({
            sourceUri: this.options.uri,
            diagramType: this.options.diagramType
        }));
    };
    DiagramWidget.prototype.getBoundsInPage = function (element) {
        var bounds = element.getBoundingClientRect();
        return {
            x: bounds.left,
            y: bounds.top,
            width: bounds.width,
            height: bounds.height
        };
    };
    DiagramWidget.prototype.onResize = function (msg) {
        _super.prototype.onResize.call(this, msg);
        var newBounds = this.getBoundsInPage(this.node);
        this.actionDispatcher.dispatch(new sprotty_1.InitializeCanvasBoundsAction(newBounds));
        this.actionDispatcher.dispatch(new sprotty_1.CenterAction([], false));
    };
    DiagramWidget.prototype.onActivateRequest = function (msg) {
        _super.prototype.onActivateRequest.call(this, msg);
        var svgElement = this.node.querySelector("#" + this.viewerOptions.baseDiv + " svg");
        if (svgElement !== null)
            svgElement.focus();
    };
    /**
     * We cannot activate the widget before the SVG element is there, as it takes the focus.
     * This should happen within two animation frames, as the action dispatcher issues
     * a SetModelCommand in the constructor. OTOH, shell.activateWidget() is synchronous. So
     * after creating the widget and before activating it, we use this method to wait for the
     * SVG to be appended to the DOM.
     */
    DiagramWidget.prototype.getSvgElement = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        var frames = 0;
                        var waitForSvg = function () {
                            requestAnimationFrame(function () {
                                var svgElement = _this.node.querySelector("#" + _this.viewerOptions.baseDiv + " svg");
                                if (svgElement !== null)
                                    resolve(svgElement);
                                else if (++frames < 5)
                                    waitForSvg();
                                else
                                    resolve(undefined);
                            });
                        };
                        waitForSvg();
                    })];
            });
        });
    };
    DiagramWidget.prototype.setStatus = function (status) {
        this.statusMessageDiv.textContent = status.message;
        this.removeClasses(this.statusMessageDiv, 1);
        this.statusMessageDiv.classList.add(status.severity.toLowerCase());
        this.removeClasses(this.statusIconDiv, 0);
        var classes = this.statusIconDiv.classList;
        classes.add(status.severity.toLowerCase());
        switch (status.severity) {
            case 'FATAL':
                classes.add('fa');
                classes.add('fa-times-circle');
                break;
            case 'ERROR':
                classes.add('fa');
                classes.add('fa-exclamation-circle');
                break;
            case 'WARNING':
                classes.add('fa');
                classes.add('fa-exclamation-circle');
                break;
            case 'INFO':
                classes.add('fa');
                classes.add('fa-info-circle');
                break;
        }
    };
    DiagramWidget.prototype.removeClasses = function (element, keep) {
        var classes = element.classList;
        while (classes.length > keep) {
            var item = classes.item(classes.length - 1);
            if (item)
                classes.remove(item);
        }
    };
    DiagramWidget.prototype.storeState = function () {
        return this.options;
    };
    DiagramWidget.prototype.restoreState = function (oldState) {
        if (DiagramWidgetOptions.is(oldState))
            this.options = oldState;
    };
    return DiagramWidget;
}(widget_1.BaseWidget));
exports.DiagramWidget = DiagramWidget;
//# sourceMappingURL=diagram-widget.js.map