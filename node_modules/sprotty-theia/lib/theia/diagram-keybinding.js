"use strict";
/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var diagram_commands_1 = require("./diagram-commands");
var diagram_widget_1 = require("./diagram-widget");
var inversify_1 = require("inversify");
var frontend_application_1 = require("@theia/core/lib/browser/frontend-application");
var browser_1 = require("@theia/core/lib/browser");
var DiagramKeybindingContext = /** @class */ (function () {
    function DiagramKeybindingContext() {
        this.id = 'diagram.keybinding.context';
    }
    DiagramKeybindingContext.prototype.isEnabled = function (arg) {
        return this.application.shell.activeWidget instanceof diagram_widget_1.DiagramWidget;
    };
    __decorate([
        inversify_1.inject(frontend_application_1.FrontendApplication),
        __metadata("design:type", frontend_application_1.FrontendApplication)
    ], DiagramKeybindingContext.prototype, "application", void 0);
    DiagramKeybindingContext = __decorate([
        inversify_1.injectable()
    ], DiagramKeybindingContext);
    return DiagramKeybindingContext;
}());
exports.DiagramKeybindingContext = DiagramKeybindingContext;
var DiagramKeybindingContribution = /** @class */ (function () {
    function DiagramKeybindingContribution() {
    }
    DiagramKeybindingContribution.prototype.registerKeybindings = function (registry) {
        [
            {
                command: diagram_commands_1.DiagramCommands.CENTER,
                context: this.diagramKeybindingContext.id,
                keybinding: 'alt+c'
            },
            {
                command: diagram_commands_1.DiagramCommands.FIT,
                context: this.diagramKeybindingContext.id,
                keybinding: 'alt+f'
            },
            {
                command: diagram_commands_1.DiagramCommands.EXPORT,
                context: this.diagramKeybindingContext.id,
                keybinding: 'alt+e'
            },
            {
                command: diagram_commands_1.DiagramCommands.LAYOUT,
                context: this.diagramKeybindingContext.id,
                keybinding: 'alt+l'
            },
            {
                command: diagram_commands_1.DiagramCommands.SELECT_ALL,
                context: this.diagramKeybindingContext.id,
                keybinding: 'ctrlcmd+a'
            },
            {
                command: browser_1.CommonCommands.UNDO.id,
                context: this.diagramKeybindingContext.id,
                keybinding: 'ctrlcmd+z'
            },
            {
                command: browser_1.CommonCommands.REDO.id,
                context: this.diagramKeybindingContext.id,
                keybinding: 'ctrlcmd+shift+z'
            }
        ].forEach(function (binding) {
            registry.registerKeybinding(binding);
        });
    };
    __decorate([
        inversify_1.inject(DiagramKeybindingContext),
        __metadata("design:type", DiagramKeybindingContext)
    ], DiagramKeybindingContribution.prototype, "diagramKeybindingContext", void 0);
    DiagramKeybindingContribution = __decorate([
        inversify_1.injectable()
    ], DiagramKeybindingContribution);
    return DiagramKeybindingContribution;
}());
exports.DiagramKeybindingContribution = DiagramKeybindingContribution;
//# sourceMappingURL=diagram-keybinding.js.map