"use strict";
/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var diagram_widget_1 = require("./diagram-widget");
var browser_2 = require("@theia/editor/lib/browser");
var diagram_configuration_1 = require("./diagram-configuration");
exports.DiagramManagerProvider = Symbol('DiagramManagerProvider');
var DiagramManager = /** @class */ (function (_super) {
    __extends(DiagramManager, _super);
    function DiagramManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.widgetCount = 0;
        return _this;
    }
    DiagramManager.prototype.canHandle = function (uri, options) {
        return 10;
    };
    DiagramManager.prototype.doOpen = function (widget, options) {
        return __awaiter(this, void 0, void 0, function () {
            var op, currentEditor, widgetOptions, promises;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        op = __assign({ mode: options && options.mode ? options.mode : 'activate' }, options);
                        if (!widget.isAttached) {
                            currentEditor = this.editorManager.currentEditor;
                            widgetOptions = __assign({ area: 'main' }, (options && options.widgetOptions ? options.widgetOptions : {}));
                            if (!!currentEditor && currentEditor.editor.uri.toString(true) === widget.uri.toString(true)) {
                                widgetOptions.ref = currentEditor;
                                widgetOptions.mode = options && options.widgetOptions && options.widgetOptions.mode ? options.widgetOptions.mode : 'open-to-right';
                            }
                            this.shell.addWidget(widget, widgetOptions);
                        }
                        promises = [];
                        if (!(op.mode === 'activate')) return [3 /*break*/, 2];
                        return [4 /*yield*/, widget.getSvgElement()];
                    case 1:
                        _a.sent();
                        promises.push(this.onActive(widget));
                        promises.push(this.onReveal(widget));
                        this.shell.activateWidget(widget.widgetId);
                        return [3 /*break*/, 3];
                    case 2:
                        if (op.mode === 'reveal') {
                            promises.push(this.onReveal(widget));
                            this.shell.revealWidget(widget.widgetId);
                        }
                        _a.label = 3;
                    case 3: return [4 /*yield*/, Promise.all(promises)];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(DiagramManager.prototype, "id", {
        get: function () {
            return this.diagramType + "-diagram-manager";
        },
        enumerable: true,
        configurable: true
    });
    DiagramManager.prototype.createWidgetOptions = function (uri, options) {
        var widgetOptions = options && options.widgetOptions;
        return __assign({}, {
            diagramType: this.diagramType,
            uri: uri.toString(true),
            iconClass: this.iconClass,
            label: uri.path.base
        }, widgetOptions);
    };
    DiagramManager.prototype.createWidget = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var clientId, config, diContainer, diagramWidget;
            return __generator(this, function (_a) {
                if (diagram_widget_1.DiagramWidgetOptions.is(options)) {
                    clientId = this.createClientId();
                    config = this.diagramConfigurationRegistry.get(options.diagramType);
                    diContainer = config.createContainer(clientId);
                    diagramWidget = new diagram_widget_1.DiagramWidget(options, clientId + '_widget', diContainer, this.diagramConnector);
                    return [2 /*return*/, diagramWidget];
                }
                throw Error('DiagramWidgetFactory needs DiagramWidgetOptions but got ' + JSON.stringify(options));
            });
        });
    };
    DiagramManager.prototype.createClientId = function () {
        return this.diagramType + '_' + (this.widgetCount++);
    };
    Object.defineProperty(DiagramManager.prototype, "diagramConnector", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        inversify_1.inject(browser_1.WidgetManager),
        __metadata("design:type", browser_1.WidgetManager)
    ], DiagramManager.prototype, "widgetManager", void 0);
    __decorate([
        inversify_1.inject(browser_2.EditorManager),
        __metadata("design:type", browser_2.EditorManager)
    ], DiagramManager.prototype, "editorManager", void 0);
    __decorate([
        inversify_1.inject(diagram_configuration_1.DiagramConfigurationRegistry),
        __metadata("design:type", diagram_configuration_1.DiagramConfigurationRegistry)
    ], DiagramManager.prototype, "diagramConfigurationRegistry", void 0);
    DiagramManager = __decorate([
        inversify_1.injectable()
    ], DiagramManager);
    return DiagramManager;
}(browser_1.WidgetOpenHandler));
exports.DiagramManager = DiagramManager;
//# sourceMappingURL=diagram-manager.js.map