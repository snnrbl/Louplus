import { Action } from "../../base/actions/action";
import { IActionDispatcherProvider } from "../../base/actions/action-dispatcher";
import { IActionHandler } from "../../base/actions/action-handler";
import { ICommand } from "../../base/commands/command";
import { SModelElement, SModelRoot } from "../../base/model/smodel";
import { AbstractUIExtension } from "../../base/ui-extensions/ui-extension";
import { DOMHelper } from "../../base/views/dom-helper";
import { ViewerOptions } from "../../base/views/viewer-options";
import { EditLabelValidationResult, IEditLabelValidator } from "./edit-label";
import { EditableLabel } from "./model";
/** Shows a UI extension for editing a label on emitted `EditLabelAction`s. */
export declare class EditLabelActionHandler implements IActionHandler {
    handle(action: Action): void | Action | ICommand;
}
export interface IEditLabelValidationDecorator {
    decorate(input: HTMLInputElement, validationResult: EditLabelValidationResult): void;
    dispose(input: HTMLInputElement): void;
}
export declare class EditLabelUI extends AbstractUIExtension {
    static readonly ID = "editLabelUi";
    readonly id = "editLabelUi";
    readonly containerClass = "label-edit";
    /** The additional width to be added to the current label length for editing in pixel. Will be scaled depending on zoom level. */
    readonly additionalInputWidth = 100;
    actionDispatcherProvider: IActionDispatcherProvider;
    protected viewerOptions: ViewerOptions;
    protected domHelper: DOMHelper;
    labelValidator: IEditLabelValidator;
    validationDecorator: IEditLabelValidationDecorator;
    protected inputElement: HTMLInputElement;
    protected label?: EditableLabel & SModelElement;
    protected labelElement: HTMLElement | null;
    protected validationTimeout?: number;
    protected isActive: boolean;
    protected blockApplyEditOnInvalidInput: boolean;
    protected isCurrentLabelValid: boolean;
    protected previousLabelContent?: string;
    protected readonly labelId: string;
    protected initializeContents(containerElement: HTMLElement): void;
    protected handleKeyDown(event: KeyboardEvent): void;
    protected hideIfEscapeEvent(event: KeyboardEvent): void;
    protected applyLabelEditIfEnterEvent(event: KeyboardEvent): void;
    protected validateLabelIfContentChange(event: KeyboardEvent, value: string): void;
    protected applyLabelEdit(): Promise<void>;
    protected performLabelValidation(event: KeyboardEvent, value: string): void;
    protected validateLabel(value: string): Promise<EditLabelValidationResult>;
    protected showValidationResult(result: EditLabelValidationResult): void;
    protected clearValidationResult(): void;
    show(root: Readonly<SModelRoot>, ...contextElementIds: string[]): void;
    hide(): void;
    protected onBeforeShow(containerElement: HTMLElement, root: Readonly<SModelRoot>, ...contextElementIds: string[]): void;
    protected setPosition(containerElement: HTMLElement): void;
    protected applyTextContents(): void;
    protected applyFontStyling(): void;
}
//# sourceMappingURL=edit-label-ui.d.ts.map