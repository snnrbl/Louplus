"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var inversify_1 = require("inversify");
var types_1 = require("../../base/types");
var ui_extension_1 = require("../../base/ui-extensions/ui-extension");
var ui_extension_registry_1 = require("../../base/ui-extensions/ui-extension-registry");
var dom_helper_1 = require("../../base/views/dom-helper");
var commit_model_1 = require("../../model-source/commit-model");
var keyboard_1 = require("../../utils/keyboard");
var model_1 = require("../bounds/model");
var zoom_1 = require("../viewport/zoom");
var edit_label_1 = require("./edit-label");
var model_2 = require("./model");
/** Shows a UI extension for editing a label on emitted `EditLabelAction`s. */
var EditLabelActionHandler = /** @class */ (function () {
    function EditLabelActionHandler() {
    }
    EditLabelActionHandler.prototype.handle = function (action) {
        if (edit_label_1.isEditLabelAction(action)) {
            return new ui_extension_registry_1.SetUIExtensionVisibilityAction(EditLabelUI.ID, true, [action.labelId]);
        }
    };
    EditLabelActionHandler = __decorate([
        inversify_1.injectable()
    ], EditLabelActionHandler);
    return EditLabelActionHandler;
}());
exports.EditLabelActionHandler = EditLabelActionHandler;
var EditLabelUI = /** @class */ (function (_super) {
    __extends(EditLabelUI, _super);
    function EditLabelUI() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.id = EditLabelUI_1.ID;
        _this.containerClass = "label-edit";
        /** The additional width to be added to the current label length for editing in pixel. Will be scaled depending on zoom level. */
        _this.additionalInputWidth = 100;
        _this.validationTimeout = undefined;
        _this.isActive = false;
        _this.blockApplyEditOnInvalidInput = true;
        _this.isCurrentLabelValid = true;
        return _this;
    }
    EditLabelUI_1 = EditLabelUI;
    Object.defineProperty(EditLabelUI.prototype, "labelId", {
        get: function () { return this.label ? this.label.id : 'unknown'; },
        enumerable: true,
        configurable: true
    });
    EditLabelUI.prototype.initializeContents = function (containerElement) {
        var _this = this;
        containerElement.style.position = 'absolute';
        this.inputElement = document.createElement('input');
        this.inputElement.onkeydown = function (event) { return _this.handleKeyDown(event); };
        this.inputElement.onkeyup = function (event) { return _this.validateLabelIfContentChange(event, _this.inputElement.value); };
        this.inputElement.onblur = function () { return window.setTimeout(function () { return _this.applyLabelEdit(); }, 200); };
        containerElement.appendChild(this.inputElement);
    };
    EditLabelUI.prototype.handleKeyDown = function (event) {
        this.hideIfEscapeEvent(event);
        this.applyLabelEditIfEnterEvent(event);
    };
    EditLabelUI.prototype.hideIfEscapeEvent = function (event) {
        if (keyboard_1.matchesKeystroke(event, 'Escape')) {
            this.hide();
        }
    };
    EditLabelUI.prototype.applyLabelEditIfEnterEvent = function (event) {
        if (keyboard_1.matchesKeystroke(event, 'Enter')) {
            this.applyLabelEdit();
        }
    };
    EditLabelUI.prototype.validateLabelIfContentChange = function (event, value) {
        if (this.previousLabelContent === undefined || this.previousLabelContent !== value) {
            this.previousLabelContent = value;
            this.performLabelValidation(event, this.inputElement.value);
        }
    };
    EditLabelUI.prototype.applyLabelEdit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isActive) {
                            return [2 /*return*/];
                        }
                        if (!this.blockApplyEditOnInvalidInput) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.validateLabel(this.inputElement.value)];
                    case 1:
                        result = _a.sent();
                        if ('error' === result.severity) {
                            this.inputElement.focus();
                            return [2 /*return*/];
                        }
                        _a.label = 2;
                    case 2:
                        this.actionDispatcherProvider()
                            .then(function (actionDispatcher) { return actionDispatcher.dispatchAll([new edit_label_1.ApplyLabelEditAction(_this.labelId, _this.inputElement.value), new commit_model_1.CommitModelAction()]); })
                            .catch(function (reason) { return _this.logger.error(_this, 'No action dispatcher available to execute apply label edit action', reason); });
                        this.hide();
                        return [2 /*return*/];
                }
            });
        });
    };
    EditLabelUI.prototype.performLabelValidation = function (event, value) {
        var _this = this;
        if (this.validationTimeout) {
            window.clearTimeout(this.validationTimeout);
        }
        this.validationTimeout = window.setTimeout(function () { return _this.validateLabel(value); }, 200);
    };
    EditLabelUI.prototype.validateLabel = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            var result, reason_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.labelValidator && this.label)) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.labelValidator.validate(value, this.label)];
                    case 2:
                        result = _a.sent();
                        this.isCurrentLabelValid = 'error' !== result.severity;
                        this.showValidationResult(result);
                        return [2 /*return*/, result];
                    case 3:
                        reason_1 = _a.sent();
                        this.logger.error(this, 'Error validating edited label', reason_1);
                        return [3 /*break*/, 4];
                    case 4:
                        this.isCurrentLabelValid = true;
                        return [2 /*return*/, { severity: 'ok', message: undefined }];
                }
            });
        });
    };
    EditLabelUI.prototype.showValidationResult = function (result) {
        this.clearValidationResult();
        if (this.validationDecorator) {
            this.validationDecorator.decorate(this.inputElement, result);
        }
    };
    EditLabelUI.prototype.clearValidationResult = function () {
        if (this.validationDecorator) {
            this.validationDecorator.dispose(this.inputElement);
        }
    };
    EditLabelUI.prototype.show = function (root) {
        var contextElementIds = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            contextElementIds[_i - 1] = arguments[_i];
        }
        if (!hasEditableLabel(contextElementIds, root) || this.isActive) {
            return;
        }
        _super.prototype.show.apply(this, __spreadArrays([root], contextElementIds));
        this.isActive = true;
        this.inputElement.focus();
    };
    EditLabelUI.prototype.hide = function () {
        _super.prototype.hide.call(this);
        this.clearValidationResult();
        this.isActive = false;
        this.isCurrentLabelValid = true;
        this.previousLabelContent = undefined;
        if (this.labelElement) {
            this.labelElement.style.visibility = 'visible';
        }
    };
    EditLabelUI.prototype.onBeforeShow = function (containerElement, root) {
        var contextElementIds = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            contextElementIds[_i - 2] = arguments[_i];
        }
        this.label = getEditableLabels(contextElementIds, root)[0];
        this.previousLabelContent = this.label.text;
        this.setPosition(containerElement);
        this.applyTextContents();
        this.applyFontStyling();
    };
    EditLabelUI.prototype.setPosition = function (containerElement) {
        var x = 0;
        var y = 0;
        var width = 100;
        var height = 20;
        if (this.label) {
            var bounds = model_1.getAbsoluteClientBounds(this.label, this.domHelper, this.viewerOptions);
            x = bounds.x;
            y = bounds.y;
            height = bounds.height;
            width = bounds.width + (this.additionalInputWidth * zoom_1.getZoom(this.label));
        }
        containerElement.style.left = x + "px";
        containerElement.style.top = y + "px";
        containerElement.style.width = width + "px";
        containerElement.style.height = height + "px";
        this.inputElement.style.position = 'absolute';
    };
    EditLabelUI.prototype.applyTextContents = function () {
        if (this.label) {
            this.inputElement.value = this.label.text;
            this.inputElement.setSelectionRange(0, this.inputElement.value.length);
        }
    };
    EditLabelUI.prototype.applyFontStyling = function () {
        if (this.label) {
            this.labelElement = document.getElementById(this.domHelper.createUniqueDOMElementId(this.label));
            if (this.labelElement) {
                this.labelElement.style.visibility = 'hidden';
                var style = window.getComputedStyle(this.labelElement);
                this.inputElement.style.font = style.font;
                this.inputElement.style.fontStyle = style.fontStyle;
                this.inputElement.style.fontFamily = style.fontFamily;
                this.inputElement.style.fontSize = scaledFont(style.fontSize, zoom_1.getZoom(this.label));
                this.inputElement.style.fontWeight = style.fontWeight;
            }
        }
    };
    var EditLabelUI_1;
    EditLabelUI.ID = "editLabelUi";
    __decorate([
        inversify_1.inject(types_1.TYPES.IActionDispatcherProvider),
        __metadata("design:type", Function)
    ], EditLabelUI.prototype, "actionDispatcherProvider", void 0);
    __decorate([
        inversify_1.inject(types_1.TYPES.ViewerOptions),
        __metadata("design:type", Object)
    ], EditLabelUI.prototype, "viewerOptions", void 0);
    __decorate([
        inversify_1.inject(types_1.TYPES.DOMHelper),
        __metadata("design:type", dom_helper_1.DOMHelper)
    ], EditLabelUI.prototype, "domHelper", void 0);
    __decorate([
        inversify_1.inject(types_1.TYPES.IEditLabelValidator), inversify_1.optional(),
        __metadata("design:type", Object)
    ], EditLabelUI.prototype, "labelValidator", void 0);
    __decorate([
        inversify_1.inject(types_1.TYPES.IEditLabelValidationDecorator), inversify_1.optional(),
        __metadata("design:type", Object)
    ], EditLabelUI.prototype, "validationDecorator", void 0);
    EditLabelUI = EditLabelUI_1 = __decorate([
        inversify_1.injectable()
    ], EditLabelUI);
    return EditLabelUI;
}(ui_extension_1.AbstractUIExtension));
exports.EditLabelUI = EditLabelUI;
function hasEditableLabel(contextElementIds, root) {
    return getEditableLabels(contextElementIds, root).length === 1;
}
function getEditableLabels(contextElementIds, root) {
    return contextElementIds.map(function (id) { return root.index.getById(id); }).filter(model_2.isEditableLabel);
}
function scaledFont(font, zoom) {
    return font.replace(/([0-9]+)/, function (match) {
        return String(Number.parseInt(match, 10) * zoom);
    });
}
//# sourceMappingURL=edit-label-ui.js.map