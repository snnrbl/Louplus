"use strict";
/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var strings_1 = require("snabbdom-virtualize/strings");
var inversify_1 = require("inversify");
var PreRenderedView = /** @class */ (function () {
    function PreRenderedView() {
    }
    PreRenderedView.prototype.render = function (model, context) {
        var node = strings_1.default(model.code);
        this.correctNamespace(node);
        return node;
    };
    PreRenderedView.prototype.correctNamespace = function (node) {
        if (node.sel === 'svg' || node.sel === 'g')
            this.setNamespace(node, 'http://www.w3.org/2000/svg');
    };
    PreRenderedView.prototype.setNamespace = function (node, ns) {
        if (node.data === undefined)
            node.data = {};
        node.data.ns = ns;
        var children = node.children;
        if (children !== undefined) {
            for (var i = 0; i < children.length; i++) {
                var child = children[i];
                if (typeof child !== 'string')
                    this.setNamespace(child, ns);
            }
        }
    };
    PreRenderedView = __decorate([
        inversify_1.injectable()
    ], PreRenderedView);
    return PreRenderedView;
}());
exports.PreRenderedView = PreRenderedView;
//# sourceMappingURL=generic-views.js.map